<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[琴心剑胆]]></title>
  <subtitle><![CDATA[Life is painting a picture, not doing a sum.]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://falconchen.github.io/"/>
  <updated>2014-05-28T02:14:32.119Z</updated>
  <id>http://falconchen.github.io/</id>
  
  <author>
    <name><![CDATA[Falcon Chen]]></name>
    <email><![CDATA[falcon_chen@qq.com]]></email>
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[hello LiteIde]]></title>
    <link href="http://falconchen.github.io/2014/05/28/helloLiteIde/"/>
    <id>http://falconchen.github.io/2014/05/28/helloLiteIde/</id>
    <published>2014-05-27T16:00:00.000Z</published>
    <updated>2014-05-28T02:14:18.000Z</updated>
    <content type="html"><![CDATA[<p>一直用 <code>markdownPad2</code> 写作，毕竟是个商业软件，限制还是太多，尤其是它不支持github的扩展markdown语法高亮,今天换成<code>LiteIde</code>了，一个Go语言的IDE，用着还挺顺手的，启动速度很快，不仅有html即时预览，还有文件目录列表，启动命令行终端（这个对我很重要，可以进入<code>hexo</code>,编译和发布到<code>github</code>），支持<code>markdown语法高亮</code>，支持导出为<code>PDF格式</code> ，这些功能都是<code>markdownPad2</code>收费版才有的，甚至还能自定义css，支持多个平台。</p>
<p>windows版的下载地址：<a href="https://golangide.googlecode.com/files/liteidex19.windows.7z" target="_blank">https://golangide.googlecode.com/files/liteidex19.windows.7z</a></p>
<p>截图：<br><img src="/image/LiteIde.jpg" alt="liteIde"></p>
]]></content>
    
    
      <category term="markdown" scheme="http://falconchen.github.io/tags/markdown/"/>
    
      <category term="IDE" scheme="http://falconchen.github.io/tags/IDE/"/>
    
      <category term="liteIde" scheme="http://falconchen.github.io/tags/liteIde/"/>
    
      <category term="开发工具" scheme="http://falconchen.github.io/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[微信开发笔记[0]:搭建开发测试环境]]></title>
    <link href="http://falconchen.github.io/2014/05/27/%E5%BE%AE%E4%BF%A1%E5%BC%80%E5%8F%91%5B0%5D-%E6%90%AD%E5%BB%BA%E5%BC%80%E5%8F%91%E6%B5%8B%E8%AF%95%E7%8E%AF%E5%A2%83/"/>
    <id>http://falconchen.github.io/2014/05/27/微信开发[0]-搭建开发测试环境/</id>
    <published>2014-05-27T03:34:26.000Z</published>
    <updated>2014-05-27T09:18:47.000Z</updated>
    <content type="html"><![CDATA[<p>概况：</p>
<ul>
<li><p>本地开发机 <code>win7</code> ,计算机名：<code>FALCON-PC</code> ,公司内网无法进行80端口映射.已安装 <code>nginx+php+mysql</code></p>
</li>
<li><p>外网测试机环境为<code>centos6.4</code>，主机名<code>cpp65</code> 。已安装<code>nginx</code></p>
</li>
<li><p>使用域名 <code>65.hihoku.com</code> 进行开发测试，A记录已指向<code>cpp65</code></p>
</li>
</ul>
<p>搭建目标：</p>
<ul>
<li>微信服务器能直接与本地开发机通讯，本地开发即时看到调试效果</li>
</ul>
<p>原理和实现：</p>
<ul>
<li><p>由于微信服务器不能直接访问内网的开发机，所以先让微信服务器访问外网测试主机，测试主机通过ssh隧道将请求转发至开发机，取得开发机响应的数据后，再返回给微信服务器。</p>
</li>
<li><p>SSH Forward 远程端口转发（<code>C2S</code>模式）+ <code>nginx反向代理</code> </p>
</li>
</ul>
<a id="more"></a> 

<p>实施步骤：</p>
<h3 id="Step1:_@_win7_给nginx_增加一条配置如下：">Step1:  <code>@ win7</code> 给nginx 增加一条配置如下：</h3>
<figure class="highlight bash"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
</pre></td><td class="code"><pre>server {
        listen       <span class="number">80</span>;
        server_name  <span class="number">65</span>.hihoku.com;
        <span class="keyword">set</span> <span class="variable">$generater</span> <span class="string">"wordpress"</span>;
        <span class="comment">#charset koi8-r;</span>
        <span class="comment">#access_log  logs/host.access.log  main;</span>
        location / {
          root   F:/kuaipan/hihoku/<span class="number">65</span>.hihoku.com;
          index  index.php index.html index.htm;
          try_files <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.php;  
        }
 
 
        error_page   <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span>  /<span class="number">50</span>x.html;
        location = /<span class="number">50</span>x.html {
            root   html;
        }
        location ~ \.php$ {
            root   F:/kuaipan/hihoku/<span class="number">65</span>.hihoku.com;
            fastcgi_pass localhost:<span class="number">9000</span>;
            fastcgi_index index.php;
            include fastcgi_params;
            fastcgi_param XGEN <span class="variable">$generater</span>;
            fastcgi_param SCRIPT_FILENAME <span class="variable">$document_root</span><span class="variable">$fastcgi_script_name</span>;
        }
 
 
    }
<span class="comment">#server 65.hihoku.com end}</span>
</pre></td></tr></table></figure><br>在web根目录下<code>F:/kuaipan/hihoku/65.hihoku.com</code>，新建<code>index.php</code>,写入内容：<br><figure class="highlight php"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="preprocessor">&lt;?php</span> phpinfo();<span class="preprocessor">?&gt;</span>
</pre></td></tr></table></figure>

<p><code>nginx -t</code> 测试没有问题后 重启nginx</p>
<h3 id="Step2:_@win7_开发机设置_ssh_forward">Step2: <code>@win7</code> 开发机设置 <code>ssh forward</code></h3>
<p>可以使用<code>putty</code>，或者<code>cygwin</code>、<code>minGW</code>里的ssh命令，我机器上有<code>minGW</code>，执行<code>ssh -v</code>查看。</p>
<ul>
<li>使用密钥 登陆 :   <code>@ win7</code></li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>f:\&gt;ssh root@cpp65 -i C:\Users\Administrator\ .ssh\id_rsa_cpp
</pre></td></tr></table></figure>

<p>登录成功，密钥可用 。</p>
<p>进行 <code>ssh forward</code> <code>@win7</code> :</p>
<pre><code>C:<span class="command">\Users</span><span class="command">\Administrator</span>&gt;ssh -C -N -g -R 7002:localhost:80 root@cpp65 -i C:<span class="command">\Users</span><span class="command">\Admini</span> strator<span class="command">\.</span>ssh<span class="command">\id</span>_rsa_cpp
</code></pre><p>这是整个过程中最不好理解的一个步骤，实际上可以看作一个变相的端口映射过程，即将本地的80端口通过ssh映射到远程<code>cpp65</code>的7002端口。这里的<code>localhost</code>指是<code>cpp65</code>而不是本地的<code>win7</code>，也可以修改为其他机器，比如<code>cpp66</code>之类的，只要<code>cpp65</code>能访问到。具体参数参考文章后面的附录</p>
<blockquote>
<p>注意，此命令成功后<strong>没有任何提示</strong>。在<code>@cpp65</code>查看监听端口，可以看到<code>7002</code>端口正在监听。</p>
</blockquote>
<pre><code><span class="comment"># netstat -tlnp | grep :7002</span>
tcp        <span class="number">0</span>      <span class="number">0</span> <span class="number">127.0</span>.<span class="number">0</span>.<span class="number">1</span><span class="symbol">:</span><span class="number">7002</span>              <span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span><span class="symbol">:*</span>                   <span class="constant">LISTEN</span>      <span class="number">9016</span>/sshd
tcp        <span class="number">0</span>      <span class="number">0</span> <span class="symbol">:</span><span class="symbol">:</span><span class="number">1</span><span class="symbol">:</span><span class="number">7002</span>                    <span class="symbol">:</span><span class="symbol">:</span><span class="symbol">:*</span>                        <span class="constant">LISTEN</span>      <span class="number">9016</span>/sshd
</code></pre><p>如果<code>forward</code>失败，提示如下，请检查主机名和登录凭据。</p>
<blockquote>
<p>Warning: remote port forwarding failed for listen port 7002</p>
</blockquote>
<h3 id="Step3:_@cpp65_nginx配置反向代理:">Step3: <code>@cpp65</code> nginx配置反向代理:</h3>
<p>最简单的配置如下：</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="code"><pre>server{
       	listen  <span class="number">80</span>;
        server_name <span class="number">65</span>.hihoku.com;
        access_log /hihoku/log/web/<span class="number">65</span>.access.log;


        location / {
                proxy_pass http://<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">7002</span>;
                include proxy.conf;
        }


   	}
</pre></td></tr></table></figure><br><code>@cpp65</code> 重启nginx,  此时再访问 <a href="http://65.hihoku.com" target="_blank">http://65.hihoku.com</a>   可以看到开发机的虚拟服务器了。<br> <img src="/image/phpinfo.jpg" alt="本机的phpinfo"></p>
<blockquote>
<p>注意:  由于开发机配置了多个虚拟服务器， 如果<code>@cpp65</code>上直接 访问<a href="http://127.0.0.1:7002" target="_blank">http://127.0.0.1:7002</a>  可以看到开发机本地按 <a href="http://localhost" target="_blank">http://localhost</a>   访问的结果,而非<code>65.hihoku.com</code>。</p>
</blockquote>
<h3 id="Step4:_验证和接入">Step4: 验证和接入</h3>
<p>登录<a href="https://mp.weixin.qq.com/" target="_blank">微信公众帐号平台</a>,进入<code>开发模式</code>。</p>
<p>参考：<a href="http://mp.weixin.qq.com/wiki/index.php?title=%E6%8E%A5%E5%85%A5%E6%8C%87%E5%8D%97" target="_blank">接入指南 - 微信公众平台开发者文档</a></p>
<p>下载php示例并解压，将php文件改名为<code>wx.php</code>并放在开发机配置的web根目录下,本机为<code>F:/kuaipan/hihoku/65.hihoku.com</code><br>将<code>wx.php</code>的<code>define(&quot;TOKEN&quot;, &quot;weixin&quot;);</code>改为你自己的token。</p>
<p>填写接口配置：<br><img src="http://mp.weixin.qq.com/wiki/images/4/41/%E6%8E%A5%E5%8F%A3%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF.png" alt=""></p>
<blockquote>
<p>token为你自己在<code>wx.php</code>中定义的 token<br>url为<a href="http://65.hihoku.com/wx.php" target="_blank">http://65.hihoku.com/wx.php</a>,提交即可。</p>
</blockquote>
<h3 id="Step5:_@win7_设置robots协议,_禁止蜘蛛抓取开发机域名下的内容">Step5: <code>@win7</code> 设置robots协议, 禁止蜘蛛抓取开发机域名下的内容</h3>
<p>这是额外的步骤，防止因测试环境与生产环境内容重复破坏主站的SEO </p>
<p>nginx虚拟服务器配置加入以下内容：</p>
<pre><code><span class="keyword">if</span> (<span class="variable">$host</span> ~ <span class="string">'^65.hihoku.com'</span>){
    rewrite ^<span class="regexp">/robots.txt$ /robots</span>_deny.txt last;
}
</code></pre><p>根目录新建以下文件：<code>robots_deny.txt</code>，写入内容：</p>
<pre><code> <span class="constant">User</span>-<span class="symbol">agent:</span>*
 <span class="constant">Disallow</span><span class="symbol">:/</span>
</code></pre><p>重启nginx生效</p>
<h4 id="ssh_forward_相关参数的解释：">ssh forward 相关参数的解释：</h4>
<blockquote>
<p> -f Fork into background after authentication.<br>后台认证用户/密码，通常和-N连用，不用登录到远程主机。<br>-L port:host:hostport<br>将 本地机(客户机)的某个端口转发到远端指定机器的指定端口. 工作原理是这样的, 本地机器上分配了一个 socket 侦听 port 端口, 一旦这 个端口上有了连接, 该连接就经过安全通道转发出去, 同时远程主机和 host 的 hostport 端口建立连接. 可以在配置文件中指定端口的转 发. 只有 root 才能转发特权端口. IPv6 地址用另一种格式说明: port/host/hostport<br>-R port:host:hostport<br>将 远程主机(服务器)的某个端口转发到本地端指定机器的指定端口. 工作原理是这样的, 远程主机上分配了一个 socket 侦听 port 端口, 一 旦这个端口上有了连接, 该连接就经过安全通道转向出去, 同时本地主机和 host 的 hostport 端口建立连接. 可以在配置文件中指定端口 的转发. 只有用 root 登录远程主机才能转发特权端口. IPv6 地址用另一种格式说明: port/host/hostport<br>-D port<br>指 定一个本地机器 “动态的’’ 应用程序端口转发. 工作原理是这样的, 本地机器上分配了一个 socket 侦听 port 端口, 一旦这个端口上 有了连接, 该连接就经过安全通道转发出去, 根据应用程序的协议可以判断出远程主机将和哪里连接. 目前支持 SOCKS4 协议, 将充 当 SOCKS4 服务器. 只有 root 才能转发特权端口. 可以在配置文件中指定动态端口的转发.<br>-C Enable compression.<br>压缩数据传输。<br>-N Do not execute a shell or command.<br>不执行脚本或命令，通常与-f连用。<br>-g Allow remote hosts to connect to forwarded ports.<br>在-L/-R/-D参数中，允许远程主机连接到建立的转发的端口，如果不加这个参数，只允许本地主机建立连接。注：这个参数我在实践中似乎始终不起作用。</p>
</blockquote>
<h4 id="参考_:">参考 :</h4>
<ul>
<li><a href="http://hi.baidu.com/oldsvn/item/c7940804f216f41d6c9048da" target="_blank">SSH隧道与端口转发及内网穿透<em>oldsvn’ Blog</em>百度空间</a></li>
</ul>
<ul>
<li><p><a href="http://falcon.sinaapp.com/post-34900.html" target="_blank">实战SSH Forward、ssh-copy-id、autossh及其他 | 雕刻时光</a></p>
</li>
<li><p><a href="http://mp.weixin.qq.com/wiki/index.php?title=%E6%8E%A5%E5%85%A5%E6%8C%87%E5%8D%97" target="_blank">接入指南 - 微信公众平台开发者文档</a></p>
</li>
</ul>
]]></content>
    <summary type="html"><![CDATA[<p>概况：</p>
<ul>
<li><p>本地开发机 <code>win7</code> ,计算机名：<code>FALCON-PC</code> ,公司内网无法进行80端口映射.已安装 <code>nginx+php+mysql</code></p>
</li>
<li><p>外网测试机环境为<code>centos6.4</code>，主机名<code>cpp65</code> 。已安装<code>nginx</code></p>
</li>
<li><p>使用域名 <code>65.hihoku.com</code> 进行开发测试，A记录已指向<code>cpp65</code></p>
</li>
</ul>
<p>搭建目标：</p>
<ul>
<li>微信服务器能直接与本地开发机通讯，本地开发即时看到调试效果</li>
</ul>
<p>原理和实现：</p>
<ul>
<li><p>由于微信服务器不能直接访问内网的开发机，所以先让微信服务器访问外网测试主机，测试主机通过ssh隧道将请求转发至开发机，取得开发机响应的数据后，再返回给微信服务器。</p>
</li>
<li><p>SSH Forward 远程端口转发（<code>C2S</code>模式）+ <code>nginx反向代理</code> </p>
</li>
</ul>
]]></summary>
    
      <category term="微信" scheme="http://falconchen.github.io/tags/%E5%BE%AE%E4%BF%A1/"/>
    
      <category term="ssh" scheme="http://falconchen.github.io/tags/ssh/"/>
    
      <category term="nginx" scheme="http://falconchen.github.io/tags/nginx/"/>
    
      <category term="反向代理" scheme="http://falconchen.github.io/tags/%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/"/>
    
      <category term="微信开发" scheme="http://falconchen.github.io/categories/%E5%BE%AE%E4%BF%A1%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[我不是为了输赢，我就是认真。]]></title>
    <link href="http://falconchen.github.io/2014/05/26/luo/"/>
    <id>http://falconchen.github.io/2014/05/26/luo/</id>
    <published>2014-05-26T07:06:04.000Z</published>
    <updated>2014-05-26T07:22:19.000Z</updated>
    <content type="html"><![CDATA[本文转自CoolShell.cn 作者：陈皓，原文链接：<a href="http://coolshell.cn/articles/11629.html" title="我只是认真」聊聊工匠情怀 " target="_blank">「我只是认真」聊聊工匠情怀 | 酷 壳 - CoolShell.cn</a></br>
<p>老罗的Smartisan T1手机发布会很多人应该都看了，发布会的最后老罗凝视着自己的工匠自画像，半晌没说话，随后转过身，慢慢离开舞台，屏幕下方只留下一句话：</p>
<p style="padding-left: 30px;"><strong>我不是为了输赢，我就是认真。</strong></p>
<p>这一瞬间让我想起93年「狮城舌战」的主角蒋昌建，在「人性本善还是人性本恶」的总结陈词最后，以顾城的名句，「黑夜给了我黑色的眼睛，我却用它寻找光明」，把整个辩论赛的氛围推向高潮。</p>
<p>而老罗的这句话，和这句话背后的工匠背景，却以另外一种<span style="color: #ff0000;"><strong>无声的却震人心魄的力量</strong></span>，敲打着每一个在场的，或是观看着整个发布会的观众的心绪。</p>
<p>「工匠情怀」，我深有体会，就像我在 <a href="http://blog.hesey.net/2014/05/gc-oriented-java-programming.html" target="_blank">面向GC的Java编程</a> 一文中所提到的：</p>
<p style="padding-left: 30px;"><span style="color: #ff6600;"><strong>优秀程序员的价值，不在于其所掌握的几招屠龙之术，而是在细节中见真著。</strong></span></p>
<p style="padding-left: 30px;"><span style="color: #ff6600;"><strong>如果我们可以一次把事情做对，并且做好，在允许的范围内尽可能追求卓越，为什么不去做呢？</strong></span></p>
<a id="more"></a>
<p>追求卓越，追求完美，追求细节的极致。小时候看到那些修表匠，握着一个小螺丝刀，或是看着电工，用烙铁沾着锡和松香，在那一小寸的世界里，把坏了的地方修好，那种专注的眼神，觉得很厉害。</p>

<p>现在再去回想那些工匠工作的场景，越发觉得钦佩。在我老家有一家刻章的店，在我上幼儿园的时候就已经在那开了很多年了。前段时间需要刻一个章，发现那家店还在，于是走进去，门口坐着一个老人，我确实记不得当年是不是他，不过看这岁数八九不离十。我以前在别的地方刻的章，都是在电脑里设计完图案后，激光刻蚀。但那次老人却是用的手刻，我着实惊呆了。只看他拿出一块红色的印底，右手持着刻刀，开始一下一下地刻着。虽然老人连话都不怎么说得清了，但是工作时那专注的神情，和精湛的手艺，以及最后成品那比机器更完美的效果，着实让我心里非常动容。</p>
<p><span id="more-11629"></span></p>
<h4>一、技术人的执着</h4>
<p>我见过很多人，也见过很多程序员，都有如此的「工匠情怀」。</p>
<p>做产品需求评审，有的人善于快速提供技术解决方案，在最短的时间内解决问题。</p>
<p>但我见过的很多牛人，他们除了能在脑海里最快地形成方案原型，并且更深入地考虑各种细节点，最终能给出一个更趋于完善的技术方案。</p>
<p>在他们身上，我看到了<span style="color: #ff0000;"><strong>对这项职业的自我尊重，对自我价值的追求，也有对「卓越」的理解和渴求</strong></span>。</p>
<p>《精通正则表达式》的译者余晟老师写过他和正则表达式的 <a href="http://www.luanxiang.org/blog/archives/1717.html" target="_blank">缘起</a> 。只是因为项目经理让他「多用Google，查查正则表达式的资料」，余老师打开了正则的大门，读完了英文原版的《Mastering Regular Expression》，如今成为了国内最了解正则表达式的人之一。</p>
<p>看完那篇文章其实我想起了我的实习经历。那时候我刚去公司两三天，有一天我老板找我让我研究一下如何用Java里的MappedByteBuffer做文件内存映射来读取大文件。尽管我们当时要处理的文件很大，以我在学校编码的经验看，用普通的Reader也是可以很好地解决的。</p>
<p>于是我说，「这个其实用Reader也能做，更简单一些，没那么麻烦。」</p>
<p>老板反问我，「什么叫没那么麻烦，这是一个做技术的人的态度吗？」</p>
<p>那几天我花了很多时间，去从Linux一直到JVM，去了解什么是内存映射，底层原理是什么，和其它技术的比较、优缺点，并和其它几种读文件的技术做了性能对比。</p>
<p>虽然最后项目没有采用这个方案，但是那句反问直到现在一直在我脑海里，时时地提醒我：「<span style="color: #ff0000;"><strong>做技术的人，对待技术，应该拥有什么样的态度？</strong></span>」</p>
<p>所以其实我很感谢我的老板，以前他教我们这些新人优秀的职场习惯，有一条是每天的邮件必须没有未读数，即便是不需要阅读的邮件，也要一键置为已读，不要留一个未读的数字在那。现在想起来，有点像iOS App右上角那个提醒数的角标，有些强迫症的人怎么也忍受不了有个红圈圈在那。开个玩笑，虽然有些习惯看起来可有可无，无关紧要，但这确实映射了一种态度和思维习惯。</p>
<p><span style="color: #ff0000;"><strong>完美有多远？我不知道，但我愿意多往前走一步。</strong></span></p>
<h4>二、拾起初衷</h4>
<p>我们的生活，每天很忙碌。有时候忙得自己都忘记了为什么在此处，有时候忙得只能不断地用直觉、用以往的经验去设计一个解决方案，而没有时间去思考需求是不是合理，方案是不是最佳，我们以为自己设计的是最佳实践，谁知道呢？</p>
<p>这个社会，这个世界，处在一个以不可思议的速度向前直奔的时间线上，我们处在这个时代的浪潮之上，每个人都感到了那种令人窒息的紧迫感。</p>
<p>父母都是不希望孩子太累的，我们见过很多这样的话：</p>
<p style="padding-left: 30px;"><span style="color: #ff6600;"><strong>差不多就行了。</strong></span></p>
<p style="padding-left: 30px;"><span style="color: #ff6600;"><strong>糊弄糊弄就完事了。</strong></span></p>
<p style="padding-left: 30px;"><span style="color: #ff6600;"><strong>不要与众不同。</strong></span></p>
<p style="padding-left: 30px;"><span style="color: #ff6600;"><strong>顺其自然。</strong></span></p>
<p>但是你应该问问自己，是不是真的要 <a href="http://blog.hesey.net/2010/05/is-let-it-be-consolation-or-excuse.html" target="_blank">顺其自然</a> ？</p>
<p>我记得在上大二的时候，听一个叫端木恒的人说过一句话，大意是，<span style="color: #ff0000;"><strong>这个世界上，政治可以改变很多事情，而科技，可以通过促进信息的流通，最终去推动政治的变革，去改变整个世界。</strong></span></p>
<p>当时觉得这事儿太酷了，是的，所以我当时的想法是，要去一个技术足够强大，并且对人们的生活有实质影响的公司。希望用技术的力量去让更多人生活地更好。</p>
<p>这当然是一种不自量力，但又如何呢？只是一个普通人小小的想法，不断追求卓越，愿意比别人多往前走一步而已。</p>
<p>就像冯大辉说的：</p>
<p><span style="color: #ff6600;"><strong>所有人都说你做不成，都告诉你不要去做，不靠谱，嘲讽你，而你最后真的把事情做起来了，这就是牛逼。</strong></span></p>
<p>做成了，其实牛不牛逼对你自己而言已经不重要了。</p>
<p>没做成，所有人都笑你是傻逼，但起码也对得起自己的内心。</p>
<p>再说，如果 <a href="http://blog.hesey.net/2010/05/strength-of-the-young.html" target="_blank">青年人</a> 想的都是养老和退休，那做事的人在哪？</p>
<h4>三、发现更好的自己</h4>
<p>老罗最后的一个问题是：</p>
<p style="padding-left: 30px;"><span style="color: #ff6600;"><strong>在一个完美主义者的眼里，这是一个怎样的世界？</strong></span></p>
<p>这个社会上很多人在生活上追求更高的品质，但愿意对自己手头所做的事情坚持高标准坚持卓越理念的人已经不多见了，以至于我们发现<span style="color: #ff0000;"><strong>花再多的钱也买不到安全的食品了，花了一辈子的积蓄买的房子却有各种质量问题</strong></span>。扪心自问自己在工作中是否能坚持某些东西，大部分人的态度都差不多，只是你糊弄一下不会怎样，而他马虎一点就会死人，<span style="color: #ff0000;"><strong>区别仅仅在于这里</strong></span>。</p>
<p>M·斯科特·派克说过一句话：</p>
<p style="padding-left: 30px;"><span style="color: #ff6600;"><strong>规避问题和逃避问题的趋向，是人类心理疾病的根源。</strong></span></p>
<p>很多人把随大流把妥协作为一种「成熟」的标志，小时候敢想敢说可能也敢做，长大以后懂得了人情世故，懂得向现实妥协，45度角仰望天空说自己终于长大了。再看身边那些「冥顽不灵」、「认死理」的所谓完美主义者，认为这些人才是不正常的群体，把这些人要么当做傻逼要么当做装逼。</p>
<p>天哪，我都想问，「这是一个怎样的世界？」</p>
<p>肯定有人会说，站着说话不腰疼。诚然，在生活中，有的人是为了活下去，有的人是为了活得更好，有的人是为了帮助别人活得更好。这是不同的人生阶段，每个人的情况不一样，但这并不影响每个人内心的精神寄托和对信念的追求。</p>
<p>我从不指望去改变别人，但我相信我可以改变自己，虽然也很难。</p>
<p>学生都喜欢问，如何最快地告诉自己的能力。说实话，我真的不知道什么是捷径，我的经验就是和比你优秀的人一起工作，经常请教比你资深的人，不断挑战过去的自己（每天审视自己太紧张了，只要比前段时间的自己更好就可以了）。</p>
<h4>四、细节是魔鬼</h4>
<p>Devils are in the details，细节是魔鬼，这句话很多人都听过，但要在工作中时时刻刻注意？难。</p>
<p>前几天给同事做Code Review，就几行代码，发现了一个问题。</p>
<p style="padding-left: 30px;">场景是我们发现某个系统中存在占用内存超大的HTML字符串，需要统计HTML字符串的长度，于是为了获得准确的字节长度，这段代码调用的是String.getBytes().length，一眼看起来并没有什么大问题。</p>
<p style="padding-left: 30px;">但是考虑到本身这个字符串就比较大，联想到Java内部是用UTF-16存储字符串的，而getBytes()会转换为系统默认编码（GBK或是UTF-8等等），这里必然存在底层字符数组的拷贝（可以去参考String.getBytes()的源代码证实），一个本身就很大的字符串，经过拷贝，将会占用更多的内存，加剧这个问题，而在HTML中，中文其实只占了非常小的一部分，所以直接用String.length()，虽然会少数几个字符，但对统计结果影响其实并不大，并且这里不存在任何数组分配的开销。</p>
<p style="padding-left: 30px;">另外建议所有调用String.getBytes()的地方通通显式传入编码，这是个大坑。</p>
<p>另外一个案例，也是在Code Review的时候发现的。</p>
<p style="padding-left: 30px;">某个调用场景下，每次都会新建一个解析器对象去解析结果，尽管解析器没有任何实例变量不会产生线程安全问题，创建的开销也并不大，但我还是坚持要改成单例，使用同一个实例去处理，这也符合面向GC编程的思想。</p>
<p style="padding-left: 30px;">这些场景，每天我们都在遇到，<span style="color: #ff0000;"><strong>也许我们会说这些都是很小的问题，无伤大雅，差不多就行了</strong></span>。但就像前面说的，这是一种态度，一种思维习惯，当你坚持用最高的标准去要求自己，去要求自己的工作时，你才有可能渐渐接近卓越。细节是魔鬼，它会在完全察觉不到的时刻，把人拉回平庸。</p>
<p>「我不是为了输赢，我就是认真。」这不代表我们不在乎输赢，从头至尾我都坚信，只有坚持完美，坚持品质，坚持那些我们曾经了解现在可能已经放弃了的美好的东西，像一个老工匠，把一种专注、追求极致的情怀融入我们的作品里，也许有一天，就有人，追寻着 <a href="http://blog.hesey.net/2010/04/a-time-without-dreams.html" target="_blank">梦想</a> ，发现了 <a href="http://blog.hesey.net/2012/02/posibilities-of-life.html" target="_blank">生活更多的可能性</a> ，像乔布斯、像贝索斯，改变整个行业，改变全世界。</p>
<p>我们是被这个时代推上浪潮之巅的人，是去做一个见证者，或是一个冲在最前面也不怕被拍死的傻瓜，是我们每个人选择的权利。</p>
<p>只是不要忘记，那些傻瓜，不是真的不怕死，<span style="color: #ff0000;"><strong>他们只是认真</strong></span>。</p>
]]></content>
    <summary type="html"><![CDATA[本文转自CoolShell.cn 作者：陈皓，原文链接：<a href="http://coolshell.cn/articles/11629.html" title="我只是认真」聊聊工匠情怀 " target="_blank">「我只是认真」聊聊工匠情怀 | 酷 壳 - CoolShell.cn</a></br>
<p>老罗的Smartisan T1手机发布会很多人应该都看了，发布会的最后老罗凝视着自己的工匠自画像，半晌没说话，随后转过身，慢慢离开舞台，屏幕下方只留下一句话：</p>
<p style="padding-left: 30px;"><strong>我不是为了输赢，我就是认真。</strong></p>
<p>这一瞬间让我想起93年「狮城舌战」的主角蒋昌建，在「人性本善还是人性本恶」的总结陈词最后，以顾城的名句，「黑夜给了我黑色的眼睛，我却用它寻找光明」，把整个辩论赛的氛围推向高潮。</p>
<p>而老罗的这句话，和这句话背后的工匠背景，却以另外一种<span style="color: #ff0000;"><strong>无声的却震人心魄的力量</strong></span>，敲打着每一个在场的，或是观看着整个发布会的观众的心绪。</p>
<p>「工匠情怀」，我深有体会，就像我在 <a href="http://blog.hesey.net/2014/05/gc-oriented-java-programming.html" target="_blank">面向GC的Java编程</a> 一文中所提到的：</p>
<p style="padding-left: 30px;"><span style="color: #ff6600;"><strong>优秀程序员的价值，不在于其所掌握的几招屠龙之术，而是在细节中见真著。</strong></span></p>
<p style="padding-left: 30px;"><span style="color: #ff6600;"><strong>如果我们可以一次把事情做对，并且做好，在允许的范围内尽可能追求卓越，为什么不去做呢？</strong></span></p>
]]></summary>
    
      <category term="罗永浩" scheme="http://falconchen.github.io/tags/%E7%BD%97%E6%B0%B8%E6%B5%A9/"/>
    
      <category term="工匠情怀" scheme="http://falconchen.github.io/tags/%E5%B7%A5%E5%8C%A0%E6%83%85%E6%80%80/"/>
    
      <category term="业界" scheme="http://falconchen.github.io/tags/%E4%B8%9A%E7%95%8C/"/>
    
      <category term="转载" scheme="http://falconchen.github.io/categories/%E8%BD%AC%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[hexo安装插件]]></title>
    <link href="http://falconchen.github.io/2014/05/26/hexo%E5%AE%89%E8%A3%85%E6%8F%92%E4%BB%B6/"/>
    <id>http://falconchen.github.io/2014/05/26/hexo安装插件/</id>
    <published>2014-05-26T02:06:04.000Z</published>
    <updated>2014-05-26T02:43:59.000Z</updated>
    <content type="html"><![CDATA[<p>安装插件：</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>npm install &lt;plugin-name&gt; --save
</pre></td></tr></table></figure><br>启用插件：在<code>hexo\_config.yml</code>文件添加：</p>
<pre><code>plugins:
-<span class="ruby"> &lt;plugin-name&gt;  <span class="comment">#插件名</span></span>
</code></pre><p>升级插件：</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>npm update
</pre></td></tr></table></figure><br>卸载插件：</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>npm uninstall &lt;plugin-name&gt;
</pre></td></tr></table></figure><br>RSS插件<br>将上述命令中的『plugin-name』，替换为<code>hexo-generator-feed</code>。一旦安装完成，你可以在配置显示你站点的RSS，文件路径<code>/atom.xml</code>。</p>
<p>你可以用rss作为迁移工具，用如下命令读取其他位置的rss：</p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>hexo migrate rss &lt;<span class="built_in">source</span>&gt;
</pre></td></tr></table></figure><br>修改主题<code>header.ejs</code>，加入:</p>
<pre><code><span class="tag">&lt;<span class="title">li</span>&gt;</span><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"/atom.xml"</span> <span class="attribute">title</span>=<span class="value">"rss feed"</span>&gt;</span>Rss<span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span>
</code></pre>]]></content>
    
    
      <category term="nodejs" scheme="http://falconchen.github.io/tags/nodejs/"/>
    
      <category term="hexo" scheme="http://falconchen.github.io/tags/hexo/"/>
    
      <category term="npm" scheme="http://falconchen.github.io/tags/npm/"/>
    
      <category term="nodejs" scheme="http://falconchen.github.io/categories/nodejs/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[hexo命令及用法]]></title>
    <link href="http://falconchen.github.io/2014/05/26/hexo%E5%91%BD%E4%BB%A4%E5%8F%8A%E7%94%A8%E6%B3%95/"/>
    <id>http://falconchen.github.io/2014/05/26/hexo命令及用法/</id>
    <published>2014-05-26T01:47:53.000Z</published>
    <updated>2014-05-26T01:48:50.000Z</updated>
    <content type="html"><![CDATA[<p>安装和本地预览：</p>
<pre><code>npm <span class="keyword">install</span> hexo -g <span class="comment">#全局安装hexo模块，安装缓慢或出错请看上文</span>
hexo init blog <span class="comment">#初始化本地目录，也可cd到指定目录直接执行 hexo init</span>
cd blog
npm <span class="keyword">install</span> <span class="comment">#不要忘记执行此命令，否则生成html会不正常</span>
hexo server <span class="comment">#默认使用http://localhost:4000/，可在_config.yml更改</span>
</code></pre><p>撰写文章：</p>
<pre><code>hexo <span class="keyword">new</span> [模板名] 文章名称 <span class="preprocessor">#使用指定模板创建文章</span>
hexo <span class="keyword">new</span> page <span class="string">"pageName"</span> <span class="preprocessor">#新建页面</span>
hexo generate            <span class="preprocessor">#生成html，需要在init的目录执行</span>
hexo deploy              <span class="preprocessor">#部署到github、heroku</span>
</code></pre><p>命令缩写（精简为命令的首字母）:</p>
<pre><code>hexo n
hexo g
hexo s
hexo d
</code></pre>]]></content>
    
    
      <category term="nodejs" scheme="http://falconchen.github.io/tags/nodejs/"/>
    
      <category term="hexo" scheme="http://falconchen.github.io/tags/hexo/"/>
    
      <category term="nodejs" scheme="http://falconchen.github.io/categories/nodejs/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[hexo创建404]]></title>
    <link href="http://falconchen.github.io/2014/05/23/hexo%E5%88%9B%E5%BB%BA404/"/>
    <id>http://falconchen.github.io/2014/05/23/hexo创建404/</id>
    <published>2014-05-23T10:01:01.000Z</published>
    <updated>2014-05-26T01:50:49.000Z</updated>
    <content type="html"><![CDATA[<p>先做好一个<code>404.html</code>的html页面，放到<code>source</code>文件夹下，此时如果进行生成，hexo会自作多情地render，要禁止解析，可以在html内容前加入：</p>
<p><figure class="highlight markdown"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre><span class="header">layout: false
---</span>
</pre></td></tr></table></figure><br>即可，此时生成会在public生成一个404.html页面，在<code>github</code>无须设置，在其他服务器(如<code>nginx</code>)还需要改动配置文件。</p>
<p>这是本站的<code>公益404页面</code>:<a href="http://falconchen.github.io/404.html" target="_blank">http://falconchen.github.io/404.html</a></p>
]]></content>
    
    
      <category term="nodejs" scheme="http://falconchen.github.io/tags/nodejs/"/>
    
      <category term="hexo" scheme="http://falconchen.github.io/tags/hexo/"/>
    
      <category term="404" scheme="http://falconchen.github.io/tags/404/"/>
    
      <category term="nodejs" scheme="http://falconchen.github.io/categories/nodejs/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[nodejs笔记]]></title>
    <link href="http://falconchen.github.io/2014/05/23/nodejs%E7%AC%94%E8%AE%B0/"/>
    <id>http://falconchen.github.io/2014/05/23/nodejs笔记/</id>
    <published>2014-05-23T02:06:04.000Z</published>
    <updated>2014-05-26T06:41:37.000Z</updated>
    <content type="html"><![CDATA[<h3 id="npm安装包失败的解决方法">npm安装包失败的解决方法</h3>
<p>镜像使用方法（三种办法任意一种都能解决问题，建议使用第三种，将配置写死，下次用的时候配置还在）:</p>
<ol>
<li><p>通过<code>config</code>命令</p>
<pre><code> npm config <span class="keyword">set</span> registry http://registry<span class="preprocessor">.cnpmjs</span><span class="preprocessor">.org</span> 
 npm info underscore （如果上面配置正确这个命令会有字符串response）
</code></pre></li>
<li><p>命令行指定</p>
<pre><code> npm --registry http://registry<span class="preprocessor">.cnpmjs</span><span class="preprocessor">.org</span> info underscore 
</code></pre></li>
<li><p>编辑 <code>~/.npmrc</code>,win下为nodejs安装目录下的<code>npmrc</code> ,加入下面内容:</p>
<pre><code> registry = http://registry<span class="preprocessor">.cnpmjs</span><span class="preprocessor">.org</span>
</code></pre></li>
</ol>
<p>搜索镜像: <a href="http://cnpmjs.org" target="_blank">http://cnpmjs.org</a></p>
<p>建立或使用镜像,参考: <a href="https://github.com/fenmgk2/cnpmjs.org" target="_blank">https://github.com/fenmgk2/cnpmjs.org</a></p>
<p>引用自：<br>    <a href="http://cnodejs.org/topic/4f9904f9407edba21468f31e" target="_blank">使用npm安装一些包失败了的看过来（npm国内镜像介绍） - CNode</a></p>
]]></content>
    
    
      <category term="nodejs" scheme="http://falconchen.github.io/tags/nodejs/"/>
    
      <category term="nmp" scheme="http://falconchen.github.io/tags/nmp/"/>
    
      <category term="笔记" scheme="http://falconchen.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="nodejs" scheme="http://falconchen.github.io/categories/nodejs/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Java学习笔记]]></title>
    <link href="http://falconchen.github.io/2014/05/23/java%E7%AC%94%E8%AE%B0/"/>
    <id>http://falconchen.github.io/2014/05/23/java笔记/</id>
    <published>2014-05-23T02:06:04.000Z</published>
    <updated>2014-05-26T06:41:26.000Z</updated>
    <content type="html"><![CDATA[<ul>
<li>参考书目 </li>
</ul>
<h3 id="Head_First_Java">Head First Java</h3>
<p><img src="http://img5.douban.com/lpic/s2171906.jpg" alt="head first java"></p>
<hr>
<p>java 的integer与boolean两种类型<strong>并不相容</strong>，只能用下面的boolean变量来测试</p>
<pre><code><span class="keyword">boolean</span> isHot = <span class="keyword">true</span>;
<span class="keyword">while</span> (isHot){ }
</code></pre><hr>
<p><a id="more"></a></p>
<h3 id="centos安装java和jdk">centos安装java和jdk</h3>
<blockquote>
<p>参考 <a href="http://www.cnblogs.com/zhoulf/archive/2013/02/04/2891608.html" target="_blank">CentOS-6.3安装配置JDK-7</a>，当前安装的为最新jdk8</p>
</blockquote>
<ol>
<li><p>查看java版本</p>
<pre><code> <span class="comment"># java -version</span>
</code></pre></li>
</ol>
<ol>
<li><p>查看JDK信息</p>
<pre><code> rpm -qa <span class="string">| grep java</span>
</code></pre></li>
</ol>
<pre><code>    <span class="preprocessor">#结果</span>
    tzdata-java-<span class="number">2012</span>c-<span class="number">1.</span>el6<span class="preprocessor">.noarch</span>        
    java-<span class="number">1.6</span><span class="number">.0</span>-openjdk-<span class="number">1.6</span><span class="number">.0</span><span class="number">.0</span>-<span class="number">1.45</span><span class="number">.1</span><span class="number">.11</span><span class="number">.1</span><span class="preprocessor">.el</span>6<span class="preprocessor">.x</span>86_64            
</code></pre><ol>
<li><p>卸载openjdk,执行以下操作</p>
<pre><code> rpm <span class="attribute">-e</span> <span class="subst">--</span>nodeps tzdata<span class="attribute">-java</span><span class="subst">-</span><span class="number">2012</span>c<span class="subst">-</span><span class="number">1.</span>el6<span class="built_in">.</span>noarch
 rpm <span class="attribute">-e</span> <span class="subst">--</span>nodeps 
</code></pre></li>
</ol>
<ol>
<li><p>安装</p>
<pre><code> wget http://download<span class="preprocessor">.oracle</span><span class="preprocessor">.com</span>/otn-pub/java/jdk/<span class="number">8</span>u5-b13/jdk-<span class="number">8</span>u5-linux-x64<span class="preprocessor">.rpm</span> --no-check-certificate

 rpm -ivh jdk-<span class="number">8</span>u5-linux-x64<span class="preprocessor">.rpm</span>
</code></pre><p> <em>如果下载失败，请到 <a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank">java下载页</a>下载后再上传到服务器</em></p>
</li>
<li><p>设置环境变量</p>
<ul>
<li><p>向<strong>/etc/profile</strong>下追加以下内容</p>
<pre><code>  <span class="comment">#add java path</span>
  JAVA_HOME=/usr/java/jdk1.<span class="number">8.0</span>_05
  JRE_HOME=/usr/java/jdk1.<span class="number">8.0</span>_05/jre
  PATH=<span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$JRE_HOME</span>/bin
  CLASSPATH=.:<span class="variable">$JAVA_HOME</span>/lib/dt.jar:<span class="variable">$JAVA_HOME</span>/lib/tools.jar:<span class="variable">$JRE_HOME</span>/lib
  <span class="keyword">export</span> JAVA_HOME JRE_HOME PATH CLASSPATH
</code></pre></li>
<li><p>执行使之生效</p>
<pre><code>  <span class="built_in">source</span> /etc/profile
</code></pre></li>
<li><p>删除原来的bin</p>
<pre><code>  rm <span class="attribute">-rf</span> /usr/bin/javac
  rm <span class="attribute">-rf</span> /usr/bin/jar
  rm <span class="attribute">-rf</span> /usr/bin/java
</code></pre></li>
<li><p>建立软链接</p>
<pre><code>  ln <span class="operator">-s</span> /usr/java/jdk1.<span class="number">8.0</span>_05/bin/javac /usr/bin/javac
  ln <span class="operator">-s</span> /usr/java/jdk1.<span class="number">8.0</span>_05/bin/jar /usr/bin/jar
  ln <span class="operator">-s</span> /usr/java/jdk1.<span class="number">8.0</span>_05/bin/java /usr/bin/java
</code></pre></li>
<li><p>检测是否成功</p>
<pre><code>  java -<span class="built_in">version</span>
</code></pre><p>  如果报错如下：</p>
<blockquote>
<p>javac: error while loading shared libraries: libjli.so: cannot open shared object file: No such file or directory</p>
</blockquote>
<p>  处理如下：</p>
<pre><code>  find / -name libjli<span class="preprocessor">.so</span> <span class="preprocessor">#查找libjli.so路径</span>

  <span class="keyword">cp</span> /usr/java/jdk1<span class="number">.8</span><span class="number">.0</span>_05/jre/lib/amd64/jli/libjli<span class="preprocessor">.so</span> /lib

  <span class="keyword">ldd</span> /usr/bin/java
</code></pre></li>
</ul>
</li>
</ol>
<hr>
<p> 在windows下与Linux配置类似,但需要注意:</p>
<ol>
<li><p>全局变量设置里windows是用 <strong>%变量名%</strong> 表示而非<strong>$变量名</strong> 的形式</p>
</li>
<li><p>目录使用 <strong>\</strong> 而非<strong>/</strong></p>
</li>
<li><p>分隔符采用 <strong>;</strong> 而非 <strong>:</strong>    </p>
</li>
</ol>
<hr>
<h3 id="编译和运行">编译和运行</h3>
<p>文件1：<code>Dog.java</code>:</p>
<pre><code><span class="keyword">class</span> Dog {

    int size;
    <span class="built_in">String</span> breed ;
    <span class="built_in">String</span> name;

    <span class="keyword">void</span> bark() {
        System.out.println(<span class="string">"Ruff! Ruff!"</span>);
    }

}
</code></pre><p>文件2：<code>DogTestDrive.java</code>:</p>
<pre><code>class DogTestDrive {
    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(String[] args) {
        Dog d = <span class="keyword">new</span> Dog();
        d.size = <span class="number">40</span>;
        d.bark();
    }
}
</code></pre><p>编译：</p>
<pre><code>javac DogTestDrive<span class="preprocessor">.java</span> 
</code></pre><p>将在当前目录生成DogTestDrive.class和Dog.class</p>
<p>运行：</p>
<pre><code>java DogTestDrive
</code></pre>]]></content>
    <summary type="html"><![CDATA[<ul>
<li>参考书目 </li>
</ul>
<h3 id="Head_First_Java">Head First Java</h3>
<p><img src="http://img5.douban.com/lpic/s2171906.jpg" alt="head first java"></p>
<hr>
<p>java 的integer与boolean两种类型<strong>并不相容</strong>，只能用下面的boolean变量来测试</p>
<pre><code><span class="keyword">boolean</span> isHot = <span class="keyword">true</span>;
<span class="keyword">while</span> (isHot){ }
</code></pre><hr>
<p>]]></summary>
    
      <category term="java" scheme="http://falconchen.github.io/tags/java/"/>
    
      <category term="笔记" scheme="http://falconchen.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="学习笔记" scheme="http://falconchen.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[vim笔记]]></title>
    <link href="http://falconchen.github.io/2014/05/23/vim%E7%AC%94%E8%AE%B0/"/>
    <id>http://falconchen.github.io/2014/05/23/vim笔记/</id>
    <published>2014-05-22T16:00:00.000Z</published>
    <updated>2014-05-27T10:14:51.000Z</updated>
    <content type="html"><![CDATA[<h3 id="Windows下设置别名">Windows下设置别名</h3>
<ul>
<li><p>新建一个<code>vi.bat</code>放到<code>%path%</code>下，如<code>c:\windows\system32</code>下，写入以下内容：</p>
<pre><code>  <span class="command">\path</span><span class="command">\to</span><span class="command">\vim</span>.exe <span class="comment">%1%</span>
</code></pre></li>
</ul>
<p><a id="more"></a></p>
<ul>
<li><p>方法二，批量设置别名    (推荐)</p>
<ol>
<li><p>新建一个文件<code>aliases.txt</code>，放在任意目录下，写入如下别名内容：</p>
<pre><code> <span class="keyword">ls</span>=dir /ONE <span class="variable">$*</span>
 ll=dir /ONE <span class="variable">$*</span>
 cat=type <span class="variable">$*</span>
 rm=del <span class="variable">$*</span>
 cd=cd /d <span class="variable">$*</span>
 vi=G:\falconDisk\Vim\vim74\gvim <span class="variable">$*</span>
</code></pre></li>
<li><p>新建另一个文件 <code>autorun.bat</code> ，放在任意目录，内容如下：</p>
<pre><code> @echo off
 cls
 color 0A
 doskey /macrofile=<span class="command">\path</span><span class="command">\to</span><span class="command">\aliases</span>.txt
</code></pre></li>
<li><p>找到注册表如下位置:</p>
<p>[HKEY_CURRENT_USER\Software\Microsoft\Command Processor]</p>
<p>添加一个字符串值Autorun，值为\path\to\autorun.bat</p>
</li>
<li><p>启动命令行可以看到效果了</p>
</li>
</ol>
</li>
</ul>
<h3 id="多文件操作">多文件操作</h3>
<ol>
<li><p>列出当前缓冲区文件</p>
<pre><code> <span class="pseudo">:ls</span><span class="attr_selector">[!]</span>
</code></pre><p> 输出如下：</p>
<pre><code>     <span class="number">1</span> <span class="comment">#h  "/test/text"        line 1 ~</span>
     <span class="number">2</span>u    <span class="string">"asdf"</span>            <span class="built_in">line</span> <span class="number">0</span> ~
     <span class="number">3</span> %<span class="operator">a</span>+ <span class="string">"version.c"</span>        <span class="built_in">line</span> <span class="number">1</span> ~
</code></pre><p> 使用ctrl+^可在%与#之间切换</p>
</li>
<li><p>在当前缓冲区选择文件    </p>
<pre><code> :[s]bf            # Go <span class="keyword">to</span> first <span class="keyword">file</span>.
 :[s]bl            # Go <span class="keyword">to</span> last <span class="keyword">file</span>
 :[s]bn            # Go <span class="keyword">to</span> <span class="keyword">next</span> <span class="keyword">file</span>.
 :[s]bp            # Go <span class="keyword">to</span> previous <span class="keyword">file</span>.
 :[s]bw            # Close <span class="keyword">file</span>.
 :[s]b数字         #指定的<span class="keyword">buffer</span>
</code></pre></li>
</ol>
<ol>
<li><p>对应帮助手册 </p>
<pre><code> :<span class="keyword">help</span> <span class="keyword">ls</span>
</code></pre></li>
<li><p>多标签用插件        </p>
<p> 将minibufexpl.vim复制到plugin目录，<br> 在_vimrc中添加：</p>
<pre><code> <span class="built_in">let</span> g:miniBufExplMapCTabSwitchBufs=<span class="number">1</span>
 <span class="built_in">let</span> g:miniBufExplMapWindowNavVim=<span class="number">1</span>
 <span class="built_in">let</span> g:miniBufExplMapWindowNavArrows=<span class="number">1</span>
</code></pre></li>
</ol>
<h3 id="大小写转换">大小写转换</h3>
<ul>
<li><p>选择字符串（可使用visual模式）后单击 <code>gU</code>大写，<code>gu</code>小写</p>
</li>
<li><p>只转化某个单词：guw、gue </p>
</li>
<li><p>转换当前字符到行末为大写 gU$</p>
</li>
<li><p>转换当前字符到行首为大写： gU0</p>
</li>
<li><p>整篇文章转成大写： gggU</p>
</li>
<li><p>转换几行的大小写: 10gU</p>
</li>
</ul>
<h3 id="可视化书签">可视化书签</h3>
<ul>
<li><p>将<code>visualmark.vim</code>复制到<code>plugin</code>目录。</p>
</li>
<li><p>用gvim打开源码文件，将光标定位在需要添加书签的地方，按下ctrl+F2，即添加了书签。</p>
</li>
<li><p>使用F2在书签之间正向切换，shift+F2反向切换。</p>
</li>
</ul>
<h3 id="grep搜索项目内容">grep搜索项目内容</h3>
<ul>
<li><p>将<code>grep.vim</code>复制到<code>plugin</code>，在<code>_vimrc</code>中添加：</p>
<pre><code>  nnoremap &lt;silent&gt; &lt;<span class="constant">F3</span>&gt; <span class="symbol">:Grep&lt;CR&gt;</span>
</code></pre></li>
<li>用gvim打开源码文件，并将光标定位到要查找的内容上，按下F3，确定要查找的内容和搜索范围，gvim会在弹出的QuickFix窗口中列出所有符合条件的搜索结果</li>
</ul>
<h3 id="supertab插件">supertab插件</h3>
<ul>
<li><code>SuperTab</code>使Tab快捷键具有更快捷的上下文提示功能，下载地址：<a href="http://github.com/ervandew/supertab" target="_blank">http://github.com/ervandew/supertab</a></li>
<li><p>安装方法：</p>
<pre><code>  <span class="number">1.</span> Download supertab.vmb <span class="built_in">to</span> <span class="keyword">any</span> <span class="built_in">directory</span>.
  <span class="number">2.</span> Open <span class="operator">the</span> <span class="built_in">file</span> <span class="operator">in</span> vim ($ vim supertab.vmb).
  <span class="number">3.</span> Source <span class="operator">the</span> <span class="built_in">file</span> (:so %).
</code></pre></li>
</ul>
<h3 id="nerdtree_新建文件">nerdtree 新建文件</h3>
<p>在 <code>nerdtree</code> 中新建文件的方式是 <code>m-a</code> 并写出文件名称。刷新用<code>r</code></p>
<h3 id="窗口样式调整">窗口样式调整</h3>
<ul>
<li><p>交换两个窗口的位置，或者说移动窗口，用<code>ctrl + w + r/x</code></p>
</li>
<li><p>窗口大小调整，宽度和高度分别用<code>ctrl + w + &lt;/&gt;</code>和<code>ctrl + w + +/-</code>，或者使用更加灵活的<code>:res +n</code>，<code>:vertical res +n</code></p>
</li>
<li><p>Normal模式下，寻找上次光标所在位置为<code>ctrl + o</code>，下次的为<code>ctrl + i</code>，跳到某行修改并返回的时候非常方便</p>
</li>
</ul>
]]></content>
    <summary type="html"><![CDATA[<h3 id="Windows下设置别名">Windows下设置别名</h3>
<ul>
<li><p>新建一个<code>vi.bat</code>放到<code>%path%</code>下，如<code>c:\windows\system32</code>下，写入以下内容：</p>
<pre><code>  <span class="command">\path</span><span class="command">\to</span><span class="command">\vim</span>.exe <span class="comment">%1%</span>
</code></pre></li>
</ul>
<p>]]></summary>
    
      <category term="vim" scheme="http://falconchen.github.io/tags/vim/"/>
    
      <category term="笔记" scheme="http://falconchen.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="vim" scheme="http://falconchen.github.io/categories/vim/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello World]]></title>
    <link href="http://falconchen.github.io/2014/05/21/hello-world/"/>
    <id>http://falconchen.github.io/2014/05/21/hello-world/</id>
    <published>2014-05-21T02:06:04.000Z</published>
    <updated>2014-05-26T06:40:45.000Z</updated>
    <content type="html"><![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/" target="_blank">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html" target="_blank">trobuleshooting</a> or you can ask me on <a href="https://github.com/tommy351/hexo/issues" target="_blank">GitHub</a>.</p>
<p><a id="more"></a></p>
<h2 id="Quick_Start">Quick Start</h2>
<h3 id="Create_a_new_post">Create a new post</h3>
<figure class="highlight bash"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>$ hexo new <span class="string">"My New Post"</span>
</pre></td></tr></table></figure>

<p>More info: <a href="http://hexo.io/docs/writing.html" target="_blank">Writing</a></p>
<h3 id="Run_server">Run server</h3>
<figure class="highlight bash"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>$ hexo server
</pre></td></tr></table></figure>

<p>More info: <a href="http://hexo.io/docs/server.html" target="_blank">Server</a></p>
<h3 id="Generate_static_files">Generate static files</h3>
<figure class="highlight bash"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>$ hexo generate
</pre></td></tr></table></figure>

<p>More info: <a href="http://hexo.io/docs/generating.html" target="_blank">Generating</a></p>
<h3 id="Deploy_to_remote_sites">Deploy to remote sites</h3>
<figure class="highlight bash"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>$ hexo deploy
</pre></td></tr></table></figure>

<p>More info: <a href="http://hexo.io/docs/deployment.html" target="_blank">Deployment</a></p>
]]></content>
    <summary type="html"><![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/" target="_blank">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html" target="_blank">trobuleshooting</a> or you can ask me on <a href="https://github.com/tommy351/hexo/issues" target="_blank">GitHub</a>.</p>
<p>]]></summary>
    
      <category term="hexo" scheme="http://falconchen.github.io/tags/hexo/"/>
    
      <category term="hexo" scheme="http://falconchen.github.io/categories/hexo/"/>
    
  </entry>
  
</feed>
